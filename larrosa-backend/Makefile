.PHONY: help build up down restart logs shell db-shell test clean seed init

# Variables
COMPOSE_FILE=docker-compose.yml
BACKEND_SERVICE=backend
DB_SERVICE=postgres

# Ayuda
help:
	@echo "üöõ Larrosa Camiones - Comandos disponibles:"
	@echo ""
	@echo "üì¶ Docker:"
	@echo "  make init       - Inicializar proyecto completo"
	@echo "  make build      - Construir im√°genes Docker"
	@echo "  make up         - Levantar todos los servicios"
	@echo "  make down       - Detener todos los servicios"
	@echo "  make restart    - Reiniciar servicios"
	@echo "  make clean      - Limpiar contenedores y vol√∫menes"
	@echo ""
	@echo "üîç Desarrollo:"
	@echo "  make logs       - Ver logs del backend"
	@echo "  make shell      - Acceder al shell del backend"
	@echo "  make db-shell   - Acceder al shell de PostgreSQL"
	@echo ""
	@echo "üóÑÔ∏è Base de datos:"
	@echo "  make seed       - Poblar base de datos con datos de prueba"
	@echo "  make migrate    - Ejecutar migraciones"
	@echo "  make revision   - Crear nueva migraci√≥n"
	@echo ""
	@echo "üß™ Testing:"
	@echo "  make test       - Ejecutar tests"
	@echo "  make test-cov   - Ejecutar tests con cobertura"

# Inicializaci√≥n completa
init:
	@echo "üöõ Inicializando Larrosa Camiones..."
	@chmod +x init.sh
	@./init.sh

# Docker commands
build:
	@echo "üî® Construyendo im√°genes..."
	docker-compose -f $(COMPOSE_FILE) build

up:
	@echo "üöÄ Iniciando servicios..."
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "‚úÖ Servicios iniciados:"
	@echo "   üåê API: http://localhost:8000"
	@echo "   üìö Docs: http://localhost:8000/api/docs"

down:
	@echo "‚èπÔ∏è Deteniendo servicios..."
	docker-compose -f $(COMPOSE_FILE) down

restart:
	@echo "üîÑ Reiniciando servicios..."
	docker-compose -f $(COMPOSE_FILE) restart

clean:
	@echo "üßπ Limpiando contenedores y vol√∫menes..."
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f

# Development commands
logs:
	@echo "üìã Mostrando logs del backend..."
	docker-compose -f $(COMPOSE_FILE) logs -f $(BACKEND_SERVICE)

shell:
	@echo "üêö Accediendo al shell del backend..."
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) bash

db-shell:
	@echo "üóÑÔ∏è Accediendo a PostgreSQL..."
	docker-compose -f $(COMPOSE_FILE) exec $(DB_SERVICE) psql -U larrosa_user -d larrosa_camiones

# Database commands
seed:
	@echo "üå± Poblando base de datos..."
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) python seed_data.py

migrate:
	@echo "‚¨ÜÔ∏è Ejecutando migraciones..."
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) alembic upgrade head

revision:
	@echo "üìù Creando nueva migraci√≥n..."
	@read -p "Nombre de la migraci√≥n: " name; \
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) alembic revision --autogenerate -m "$$name"

# Testing commands
test:
	@echo "üß™ Ejecutando tests..."
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) python -m pytest

test-cov:
	@echo "üß™ Ejecutando tests con cobertura..."
	docker-compose -f $(COMPOSE_FILE) exec $(BACKEND_SERVICE) python -m pytest --cov=app --cov-report=html

test-auth:
	@echo "üîê Probando sistema de autenticaci√≥n..."
	python test_auth.py

# Status check
status:
	@echo "üìä Estado de los servicios:"
	docker-compose -f $(COMPOSE_FILE) ps

# Database backup
backup:
	@echo "üíæ Creando backup de la base de datos..."
	@mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec $(DB_SERVICE) pg_dump -U larrosa_user larrosa_camiones > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup creado en backups/"

# Database restore
restore:
	@echo "‚ôªÔ∏è Restaurando base de datos..."
	@read -p "Archivo de backup: " file; \
	if [ -f "$$file" ]; then \
		docker-compose -f $(COMPOSE_FILE) exec -T $(DB_SERVICE) psql -U larrosa_user -d larrosa_camiones < "$$file"; \
		echo "‚úÖ Base de datos restaurada"; \
	else \
		echo "‚ùå Archivo no encontrado"; \
	fi

# Development setup without Docker
dev-install:
	@echo "üîß Instalando dependencias para desarrollo local..."
	pip install -r requirements.txt
	@echo "‚úÖ Dependencias instaladas"

dev-run:
	@echo "üöÄ Iniciando servidor de desarrollo..."
	uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

# API testing
test-api:
	@echo "üåê Probando endpoints de la API..."
	curl -s http://localhost:8000/health | jq .
	@echo ""
	curl -s http://localhost:8000/api/v1/vehicles/stats | jq .